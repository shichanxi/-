#include<cstdio>
#include<iostream>
#include<stdlib.h>
using namespace std;
typedef struct
{
	int HeartRate;//心率
	char time[10];//记录时间
}HeartData;
typedef struct
{
	char time1[10], time2[10];//1开始，2结束
	int type;//类型
}Time;//时间记录
typedef struct
{
	int Duration;//睡眠持续时间（单位：分钟）
	int deepDuration, shallowDuration;//深度，浅度睡眠持续时间
	Time WakeTime;//清醒时间
	Time* TimeRecord;
	int count;
}SleepTime;
typedef struct
{
	int StepsCount;//行走总步数
	float Distance;//行走距离(单位：米）
	Time* TimeRecord;
	int* StepsNums;//对应时间行走的步数
	float* energy;//单次消耗能量
	float SumEnergy;//总能量
	int count;
}Step;
typedef struct
{
	HeartData HeartRecord[24];//心率记录，每小时记录一次
	Step StepRecord;//步数记录
	SleepTime SleepRecord;//睡眠记录
	char date[20];//日期记录
}DataBase;
void InitDataBase(DataBase& b)
{
	FILE* fp1, * fp2, * fp3;
	fp1 = fopen("心率记录.txt", "r");
	fp2 = fopen("步数记录.txt", "r");
	fp3 = fopen("睡眠记录.txt", "r");//打开文件
	if (!fp1 || !fp2 || !fp3)
	{
		cout << "数据丢失，退出程序";
		exit(0);
	}//读取文件失败退出
	int i;
	for (i = 0; i < 24; i++)
		fscanf(fp1, "%s %d", &b.HeartRecord[i].time, &b.HeartRecord[i].HeartRate);
	//心率信息的读入

	fscanf(fp2, "%d", &b.StepRecord.StepsCount);
	b.StepRecord.Distance = b.StepRecord.StepsCount * 0.5;
	int n;
	b.StepRecord.TimeRecord = NULL;
	b.StepRecord.StepsNums = NULL;
	b.StepRecord.energy = NULL;
	b.StepRecord.SumEnergy = 0;
	for (i = 0; ~fscanf(fp2, "%d ", &n); i++)
	{
		b.StepRecord.energy = (float*)realloc(b.StepRecord.energy, n * sizeof(int));
		b.StepRecord.TimeRecord = (Time*)realloc(b.StepRecord.TimeRecord, n * sizeof(Time));
		fscanf(fp2, "%s %s ", b.StepRecord.TimeRecord[i].time1, b.StepRecord.TimeRecord[i].time2);
		b.StepRecord.StepsNums = (int*)realloc(b.StepRecord.StepsNums, n * sizeof(int));
		fscanf(fp2, "%d\n", &b.StepRecord.StepsNums[i]);
		b.StepRecord.count = n;
		if (b.StepRecord.StepsNums[i] < 2000)
		{
			b.StepRecord.TimeRecord[i].type = 1;//轻度运动记录
			b.StepRecord.energy[i] = b.StepRecord.StepsNums[i] * 0.0420;
			b.StepRecord.SumEnergy += b.StepRecord.energy[i];
		}
		else if (b.StepRecord.StepsNums[i] >= 7000)
		{
			b.StepRecord.TimeRecord[i].type = 3;//重度
			b.StepRecord.energy[i] = b.StepRecord.StepsNums[i] * 0.0485;
			b.StepRecord.SumEnergy += b.StepRecord.energy[i];
		}
		else
		{
			b.StepRecord.TimeRecord[i].type = 2;//中度
			b.StepRecord.energy[i] = b.StepRecord.StepsNums[i] * 0.0464;
			b.StepRecord.SumEnergy += b.StepRecord.energy[i];
		}
	}
	//步数信息读入

	fscanf(fp3, "%s\n", b.date);//读入日期
	fscanf(fp3, "%s %s", b.SleepRecord.WakeTime.time1, b.SleepRecord.WakeTime.time2);
	b.SleepRecord.TimeRecord = NULL;
	b.SleepRecord.deepDuration = 0;
	b.SleepRecord.shallowDuration = 0;
	for (i = 0; ~fscanf(fp3, "%d ", &n); i++)
	{
		int m;
		char c;
		fscanf(fp3, "%c ", &c);
		b.SleepRecord.TimeRecord = (Time*)realloc(b.SleepRecord.TimeRecord, n * sizeof(Time));
		fscanf(fp3, "%s %s ", b.SleepRecord.TimeRecord[i].time1, b.SleepRecord.TimeRecord[i].time2);
		fscanf(fp3, "%d", &m);
		if (c == 'd')
		{
			b.SleepRecord.deepDuration += m;
			b.SleepRecord.TimeRecord[i].type = 1;//深度睡眠
		}
		if (c == 's')
		{
			b.SleepRecord.shallowDuration += m;
			b.SleepRecord.TimeRecord[i].type = 0;//浅度睡眠
		}
		b.SleepRecord.count = n;
	}
	b.SleepRecord.Duration = b.SleepRecord.deepDuration + b.SleepRecord.shallowDuration;
	cout << "读取数据成功" << endl;
	return;
}
void func1(DataBase b);
void func2(DataBase b);
void func3(DataBase b);
void func4(DataBase b);
int main()
{
	DataBase base;
	InitDataBase(base);
	while (true)
	{
		//循环执行功能菜单
		system("cls");//清理屏幕内容
		cout << "* * * * * * 目录 * * * * * *\n" << endl;
		cout << "*      1.查看心率          *\n" << endl;
		cout << "*      2.查看运动情况      *\n" << endl;
		cout << "*      3.查看睡眠情况      *\n" << endl;
		cout << "*      4.生成健康报告      *\n" << endl;
		cout << "*      5.退出              *\n" << endl;
		cout << "*    输入1到5来执行操作    *\n" << endl;
		cout << "* * * * * * *  * * * * * * *\n" << endl;
		int flag;
		cin >> flag;
		if (flag == 1)
			func1(base);
		else if (flag == 2)
			func2(base);
		else if (flag == 3)
			func3(base);
		else if (flag == 4)
			func4(base);
		else if (flag == 5)
			break;
		else
		{
			cout << "错误的指令" << endl;
			system("pause");
			continue;
		}
		system("pause");

	}
	return 0;
}
void func1(DataBase b)
{
	system("cls");
	int sum = 0, i;
	int max = 0, min = 32767;
	for (i = 0; i < 24; i++)
	{
		sum += b.HeartRecord[i].HeartRate;
		if (b.HeartRecord[i].HeartRate > max)
			max = b.HeartRecord[i].HeartRate;
		if (b.HeartRecord[i].HeartRate < min)
			min = b.HeartRecord[i].HeartRate;
	}
	sum = sum / 24;
	printf("平均心率为%d，最大为%d，最小为%d", sum, max, min);
	cout << endl;
	if (sum < 60 || sum > 100)
		cout << "心率不正常，需要及时检查" << endl;
	else
		cout << "心率正常" << endl;
	return;
}
void func2(DataBase b)
{
	system("cls");
	cout << "当前步数:" << b.StepRecord.StepsCount << endl;
	cout << "当前行走里程:" << b.StepRecord.Distance << endl;
	int i, flag = 0;
	cout << "轻度运动记录：" << endl;
	for (i = 0; i < b.StepRecord.count; i++)
	{
		if (b.StepRecord.TimeRecord[i].type == 1)
		{
			cout << "步数：" << b.StepRecord.StepsNums[i] << endl;
			cout << "时间；" << b.StepRecord.TimeRecord[i].time1 << " - " << b.StepRecord.TimeRecord[i].time2 << endl;
			cout << "消耗的能量为：" << b.StepRecord.energy[i] << "卡" << endl;
			flag++;
		}
	}
	flag = 0;
	if (!flag)
		cout << "无" << endl;
	cout << "中度运动记录：" << endl;
	for (i = 0; i < b.StepRecord.count; i++)
	{
		if (b.StepRecord.TimeRecord[i].type == 2)
		{
			cout << "步数：" << b.StepRecord.StepsNums[i] << endl;
			cout << "时间；" << b.StepRecord.TimeRecord[i].time1 << " - " << b.StepRecord.TimeRecord[i].time2 << endl;
			cout << "消耗的能量为：" << b.StepRecord.energy[i] << "卡" << endl;
			flag++;
		}
	}
	if (!flag)
		cout << "无" << endl;
	flag = 0;
	cout << "重度运动记录：" << endl;
	for (i = 0; i < b.StepRecord.count; i++)
	{
		if (b.StepRecord.TimeRecord[i].type == 3)
		{
			cout << "步数：" << b.StepRecord.StepsNums[i] << endl;
			cout << "时间；" << b.StepRecord.TimeRecord[i].time1 << " - " << b.StepRecord.TimeRecord[i].time2 << endl;
			cout << "消耗的能量为：" << b.StepRecord.energy[i] << "卡" << endl;
			flag++;
		}
	}
	if (!flag)
		cout << "无" << endl;
	cout << "消耗的总能量为：" << b.StepRecord.SumEnergy << "卡" << endl;
}
void func3(DataBase b)
{
	system("cls");
	cout << "睡眠情况：" << endl;
	cout << "睡眠总时长：" << b.SleepRecord.Duration << "分钟" << endl;
	int i;
	cout << "深度睡眠时间：" << b.SleepRecord.deepDuration << "分钟" << endl;
	for (i = 0; i < b.SleepRecord.count; i++)
	{
		if (b.SleepRecord.TimeRecord[i].type == 1)
			cout << "时间：" << b.SleepRecord.TimeRecord[i].time1 << "-" << b.SleepRecord.TimeRecord[i].time2 << endl;
	}
	cout << "浅度睡眠时间：" << b.SleepRecord.shallowDuration << "分钟" << endl;
	for (i = 0; i < b.SleepRecord.count; i++)
	{
		if (b.SleepRecord.TimeRecord[i].type == 0)
			cout << "时间：" << b.SleepRecord.TimeRecord[i].time1 << "-" << b.SleepRecord.TimeRecord[i].time2 << endl;
	}
	cout << "清醒时间：" << b.SleepRecord.WakeTime.time1 << "-" << b.SleepRecord.WakeTime.time2 << endl;
}
void func4(DataBase b)
{
	system("cls");
	int i;
	int sum = 0;
	int score = 0;
	for (i = 0; i < 24; i++)
		sum += b.HeartRecord[i].HeartRate;
	int aver = sum / 24;
	if (aver < 60 || aver > 100)
	{
		score += 19;
		cout << "心率不正常，需要进行检查" << endl;
	}
	else
	{
		score += 50;
		cout << "心率正常" << endl;
	}
	if (b.SleepRecord.deepDuration < 200)
		cout << "睡眠不足" << endl;
	else
		cout << "睡眠充足" << endl;
	score += 40 * b.SleepRecord.deepDuration / 300;
	if (b.StepRecord.StepsCount > 1000)
	{
		score += 10;
		cout << "运动量达标" << endl;
	}
	else
	{
		score += 5;
		cout << "运动量不足" << endl;
	}
	cout << "您的健康报告" << endl;
	cout << "当前步数:" << b.StepRecord.StepsCount << endl;
	cout << "当前行走里程:" << b.StepRecord.Distance << endl;
	cout << "消耗的能量为：" << b.StepRecord.SumEnergy << "千卡" << endl;
	cout << "您的体检评分：" << score << endl;
	if (score > 80)
		cout << "您的健康状态十分不错，请继续保持" << endl;
	else if (score < 60)
		cout << "健康状态不佳，请到医院检查" << endl;
	else
		cout << "身体状态良好" << endl;
}
